
{
  "rules": {
    "Users": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "Appointments": {
      "$uid": {
        ".read": true,
        ".write": "auth != null && auth.uid === $uid",
        "$appointmentId": {
          ".write": "!data.exists() && newData.exists() && newData.child('BookedByUserID').val() === $uid"
        }
      }
    },
    "Clients": {
      "$uid": {
        ".read": true,
        ".write": "auth != null && auth.uid === $uid",
        ".indexOn": [
          "ClientEmail"
        ],
        "$clientId": {
          ".write": "!data.exists() && newData.exists() && newData.child('CreatedByUserID').val() === $uid"
        }
      }
    },
    "UserPreferences": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        // Allow writes to be checked against deeper validation rules.
        ".write": true,
        "workingHours": {
          ".read": true,
          // Only the authenticated user can modify their working hours.
          ".validate": "auth != null && auth.uid === $uid"
        },
        "googleCalendar": {
          ".read": "auth != null && auth.uid === $uid"
          // No .validate rule, so the parent .write:true allows the server callback to save tokens.
        }
      }
    }
  }
}
