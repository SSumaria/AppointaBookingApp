{
  "rules": {
    "Users": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "Appointments": {
      "$uid": {
        ".read": true,
        ".write": "auth != null && auth.uid === $uid",
        "$appointmentId": {
          ".write": "!data.exists() && newData.exists() && newData.child('BookedByUserID').val() === $uid"
        }
      }
    },
    "Clients": {
      "$uid": {
        ".read": true,
        ".write": "auth != null && auth.uid === $uid",
        ".indexOn": [
          "ClientEmail"
        ],
        "$clientId": {
          ".write": "!data.exists() && newData.exists() && newData.child('CreatedByUserID').val() === $uid"
        }
      }
    },
    "UserPreferences": {
      "$uid": {
        // Allow write attempts to proceed to deeper validation.
        ".write": true,
        // Only the authenticated user can read their entire preference object.
        ".read": "auth != null && auth.uid === $uid",

        "workingHours": {
          ".read": true,
          // This rule is the key fix. It allows a write if:
          // 1. The user is the authenticated owner (for when they change their hours on the preferences page).
          // OR
          // 2. The workingHours data is NOT being changed in this specific write operation (for when the unauthenticated server writes to the googleCalendar sibling node).
          ".validate": "(auth != null && auth.uid === $uid) || (newData.val() === data.val())"
        },
        "googleCalendar": {
          // Only the owner can read their connection details.
          ".read": "auth != null && auth.uid === $uid",
          // The parent ".write: true" allows the write attempt. This validation ensures the data has the correct shape.
          // Since it has no auth check, the unauthenticated server write is allowed as long as the data is valid.
          ".validate": "newData.hasChildren(['integrated', 'tokens'])"
        }
      }
    }
  }
}
